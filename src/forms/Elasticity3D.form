# Copyright (c) 2005 Johan Jansson (johanjan@math.chalmers.se)
# Licensed under the GNU GPL Version 2
#
# First added:  2005
# Last changed: 2006-03-28
#
# The bilinear form for the incompressible Navier-Stokes equations
# Compile this form with FFC: ffc Elasticity.form.

cell = "tetrahedron"

K1 = VectorElement("Lagrange", cell, 1)
# Dimension of domain
d = K1.cell_dimension()
K2 = FiniteElement("Lagrange", cell, 1)
K3 = FiniteElement("Discontinuous Lagrange", cell, 0)
K4 = VectorElement("Discontinuous Lagrange", cell, 0)
K5 = VectorElement("Discontinuous Lagrange", cell, 0, d * d)

K = K1

v = TestFunction(K)
U1 = TrialFunction(K)
UP = Function(K)
U0 = Function(K)

B = Function(K5)
ff = Function(K)
mu = Function(K3)
lmbda = Function(K3)
beta = Function(K3)
qual = Function(K3)
k = Function(K3)

def tomatrix(q):
    return [ [q[d * i + j] for i in range(d)] for j in range(d) ]

def ugradu(u, v):
    return [dot(u, grad(v[i])) for i in range(d)]

def epsilon(u):
    return 0.5 * (grad(u) + transp(grad(u)))

def E(e, mu, lmbda):
    Ee = mult(2.0 * mu, e) + mult(lmbda, mult(trace(e), Identity(d)))
    return Ee

BM = tomatrix(B)

e = 0.5 * (Identity(d) - BM)
S = mult(qual, E(e, mu, lmbda))

def f(u, v):
    beps = mult(qual, mult(beta, epsilon(u)))
    return -(dot(mult(qual, S), grad(v)) + \
             dot(mult(qual, beps), grad(v)) + \
          dot(ff, v))
    
def dfdu(u, k, v):
    beps = mult(qual, mult(beta, epsilon(u)))
    return -(mult(k * qual, dot(E(epsilon(u), mu, lmbda), grad(v))) + \
	dot(mult(qual, beps), grad(v)))
# cG(1)
#def F(u, u0, k, v):
#    uc = mult(0.5, u + u0)
#    return (-dot(u, v) + dot(u0, v) + mult(k, f(uc, v)))
#def dFdu(u, u0, k, v):
#    uc = mult(0.5, u)
#    return (-dot(u, v) + mult(k, dfdu(uc, k, v)))

# dG(0)
def F(u, u0, k, v):
    uc = u
    return (-dot(u, v) + dot(u0, v) + mult(k, f(uc, v)))

def dFdu(u, u0, k, v):
    uc = u
    return (-dot(u, v) + mult(k, dfdu(uc, k, v)))

a = (dFdu(U1, U0, k, v)) * dx
L = (dFdu(UP, U0, k, v) - F(UP, U0, k, v)) * dx
